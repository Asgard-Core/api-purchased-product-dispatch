-- Table: roles
CREATE TABLE role (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

-- Table: users
CREATE TABLE app_user (
    id SERIAL PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    role_id INT REFERENCES role(id)
);

-- Table: products
CREATE TABLE product (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    current_stock INT NOT NULL DEFAULT 0
);

-- Table: order statuses
CREATE TABLE order_status (
    id SERIAL PRIMARY KEY,
    status_name VARCHAR(50) NOT NULL UNIQUE
);

-- Table: orders
CREATE TABLE customer_order (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES app_user(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status_id INT REFERENCES order_status(id)
);

-- Table: order-product relationship
CREATE TABLE order_product (
    id SERIAL PRIMARY KEY,
    order_id INT REFERENCES customer_order(id),
    product_id INT REFERENCES product(id),
    quantity INT NOT NULL
);

-- Table: shipping labels
CREATE TABLE shipping_label (
    id SERIAL PRIMARY KEY,
    order_id INT REFERENCES customer_order(id),
    shipping_address VARCHAR(255) NOT NULL,
    tracking_code VARCHAR(100)
);

-- Table: shipments
CREATE TABLE shipment (
    id SERIAL PRIMARY KEY,
    order_id INT REFERENCES customer_order(id),
    carrier_id INT REFERENCES app_user(id),
    shipped_at TIMESTAMP
);

-- Table: notifications
CREATE TABLE notification (
    id SERIAL PRIMARY KEY,
    order_id INT REFERENCES customer_order(id),
    message TEXT NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: reports
CREATE TABLE report (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES app_user(id),
    report_type VARCHAR(50),
    generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: product_outbound
CREATE TABLE product_outbound (
    id BIGSERIAL PRIMARY KEY,  
    code_register VARCHAR(100) NOT NULL UNIQUE,
    product_id BIGINT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    destination VARCHAR(255) NOT NULL,
    date DATE NOT NULL,
    responsible_id BIGINT NOT NULL,

    CONSTRAINT fk_product_outbound_product
        FOREIGN KEY (product_id)
        REFERENCES product(id)
        ON DELETE CASCADE,

    CONSTRAINT fk_product_outbound_responsible
        FOREIGN KEY (responsible_id)
        REFERENCES app_user(id)
        ON DELETE RESTRICT
);
